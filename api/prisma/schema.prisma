generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/**
 * ===================== ENUMS =====================
 */

enum HouseholdRole {
  OWNER
  ADMIN
  MEMBER
}

enum JoinStatus {
  PENDING
  APPROVED
  REJECTED
}

enum EntryType {
  INCOME
  EXPENSE
}

enum SavingsTxnType {
  DEPOSIT
  WITHDRAW
}

/**
 * ===================== MODELOS =====================
 */

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  passwordHash String
  createdAt    DateTime @default(now())

  tokens      DeviceToken[]
  joinReqs    HouseholdJoinRequest[]
  memberships HouseholdMember[]

  // Ledger (lado opuesto)
  ledgerEntries LedgerEntry[] @relation("UserLedgerEntries")

  // Ahorros (lados opuestos)
  createdSavingsGoals SavingsGoal[] @relation("UserCreatedSavingsGoals")
  savingsTxns         SavingsTxn[]  @relation("UserSavingsTxns")

  createdPlanned   HouseholdPlanned[]   @relation("UserCreatedPlanned")
  createdRecurring HouseholdRecurring[] @relation("UserCreatedRecurring")
}

model DeviceToken {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  platform  String
  createdAt DateTime @default(now())
  lastSeen  DateTime @default(now())
  revoked   Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId])
}

model Household {
  id        String   @id @default(uuid())
  name      String
  currency  String   @default("EUR")
  createdAt DateTime @default(now())

  invites       HouseholdInvite[]
  joinReqs      HouseholdJoinRequest[]
  members       HouseholdMember[]
  ledgerEntries LedgerEntry[]          @relation("HouseholdLedgerEntries")
  savingsGoals  SavingsGoal[]          @relation("HouseholdSavingsGoals")
  planned       HouseholdPlanned[]     @relation("HouseholdPlanned")
  recurring     HouseholdRecurring[]   @relation("HouseholdRecurring")
}

model HouseholdMember {
  householdId String
  userId      String
  role        HouseholdRole @default(MEMBER)
  joinedAt    DateTime      @default(now())
  household   Household     @relation(fields: [householdId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user        User          @relation(fields: [userId], references: [id])

  @@id([householdId, userId])
}

model HouseholdInvite {
  id              String                 @id @default(uuid())
  householdId     String
  codeHash        String
  expiresAt       DateTime
  maxUses         Int                    @default(10)
  uses            Int                    @default(0)
  requireApproval Boolean                @default(true)
  createdBy       String
  usedAt          DateTime?
  revokedAt       DateTime?
  household       Household              @relation(fields: [householdId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  joinRequests    HouseholdJoinRequest[] @relation("InviteJoinRequests")

  @@index([householdId])
}

model HouseholdJoinRequest {
  id          String          @id @default(uuid())
  householdId String
  userId      String
  inviteId    String
  status      JoinStatus      @default(PENDING)
  createdAt   DateTime        @default(now())
  decidedAt   DateTime?
  decidedBy   String?
  household   Household       @relation(fields: [householdId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  invite      HouseholdInvite @relation("InviteJoinRequests", fields: [inviteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user        User            @relation(fields: [userId], references: [id])

  @@unique([householdId, userId, status])
}

/// Gastos previstos (no asentados hasta que se "settle")
model HouseholdPlanned {
  id          String    @id @default(uuid())
  householdId String
  createdBy   String
  concept     String
  type        EntryType
  amount      Decimal   @db.Decimal(14, 2)
  dueDate     DateTime
  month       String?
  notes       String?
  category    String?
  settledAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relaciones
  household     Household @relation("HouseholdPlanned", fields: [householdId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdByUser User      @relation("UserCreatedPlanned", fields: [createdBy], references: [id])

  @@index([householdId, dueDate])
  @@index([householdId, settledAt])
  @@index([householdId, createdAt])
}

/// Gastos fijos / reglas recurrentes (se "poste√°n" como entry real con /post)
model HouseholdRecurring {
  id          String    @id @default(uuid())
  householdId String
  createdBy   String
  active      Boolean   @default(true)
  concept     String
  type        EntryType
  amount      Decimal   @db.Decimal(14, 2)
  dayOfMonth  Int?
  rrule       String?
  notes       String?
  category    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relaciones
  household     Household @relation("HouseholdRecurring", fields: [householdId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdByUser User      @relation("UserCreatedRecurring", fields: [createdBy], references: [id])

  @@index([householdId, active, createdAt])
}

/**
 * ============== Ledger (gastos/ingresos) ==============
 */

model LedgerEntry {
  id          String    @id @default(uuid())
  householdId String
  userId      String
  type        EntryType
  amount      Decimal   @db.Decimal(14, 2)
  category    String?
  note        String?
  occursAt    DateTime  @default(now())
  createdAt   DateTime  @default(now())

  household Household @relation("HouseholdLedgerEntries", fields: [householdId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user      User      @relation("UserLedgerEntries", fields: [userId], references: [id])

  @@index([householdId, occursAt])
}

/**
 * ====================== Ahorros ======================
 */

model SavingsGoal {
  id          String    @id @default(uuid())
  householdId String
  name        String
  target      Decimal   @db.Decimal(14, 2)
  deadline    DateTime?
  createdAt   DateTime  @default(now())
  createdBy   String

  household     Household    @relation("HouseholdSavingsGoals", fields: [householdId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdByUser User         @relation("UserCreatedSavingsGoals", fields: [createdBy], references: [id])
  txns          SavingsTxn[] @relation("GoalTxns")

  @@index([householdId])
}

model SavingsTxn {
  id        String         @id @default(uuid())
  goalId    String
  userId    String
  type      SavingsTxnType
  amount    Decimal        @db.Decimal(14, 2)
  note      String?
  occursAt  DateTime       @default(now())
  createdAt DateTime       @default(now())

  goal SavingsGoal @relation("GoalTxns", fields: [goalId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user User        @relation("UserSavingsTxns", fields: [userId], references: [id])

  @@index([goalId, occursAt])
}
